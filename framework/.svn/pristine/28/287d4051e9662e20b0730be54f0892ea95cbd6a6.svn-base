package com.eViewer.HTML5.Automation.Framework.Utils;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;

import com.eViewer.HTML5.Automation.Framework.Common.CustomLogger;

public class FileComparison {

	private final String APP_DIR = System.getProperty("user.dir")
			+ File.separator + "src" + File.separator + "resources"
			+ File.separator + "comparison_tool" + File.separator
			+ "ImageMagick" + File.separator + "compare.exe";

	public boolean areFilesSame(String srcFile, String compFile)
			throws Exception {
		try {
			byte[] srcFileInBytes = FileUtils
					.readFileToByteArray(new File(srcFile));
			byte[] compFileInBytes = FileUtils
					.readFileToByteArray(new File(compFile));

			if (!Arrays.equals(srcFileInBytes, compFileInBytes)) {
				CustomLogger.logWarning(
						"areFilesSame: source and comparison files are different");
				return false;
			}
		} catch (Exception e) {
			CustomLogger.logError("arePDFSame: " + e.getMessage());
			throw new Exception("arePDFSame: " + e.getMessage());
		}
		return true;
	}

	public boolean areOfDifferentSize(String srcFile, String compFile)
			throws Exception {
		try {
			BufferedImage srcImage = fileToImage(srcFile);
			BufferedImage compImage = fileToImage(compFile);

			if (srcImage.getHeight() != compImage.getHeight()
					|| srcImage.getWidth() != compImage.getWidth()) {
				CustomLogger.logWarning(
						"areOfDifferentSize: source and comparison images have different size");
				return true;
			}
		} catch (Exception e) {
			CustomLogger.logError("areOfDifferentSize: " + e.getMessage());
			throw new Exception("areOfDifferentSize: " + e.getMessage());
		}
		return false;
	}

	public boolean compareImages(String srcFile, String compFile,
			String diffFilePath) throws Exception {
		boolean check = false;
		String consoleOutput = "";
		Launcher launcher = new Launcher();
		try {
			consoleOutput = launcher.runApplication(new String[]{APP_DIR,
					"-metric", "mae", srcFile, compFile, "null:"});

			float firstResult = 0;
			try {
				firstResult = Float
						.parseFloat(StringUtils.split(consoleOutput, ' ')[0]);
			} catch (Exception e) {
			}

			if (consoleOutput.contains("error")
					|| consoleOutput.contains("ImageWidthsOrHeightsDiffer")) {
				CustomLogger.logInfo(
						"compareImages: baseline and actual images have different size");
			} else if (consoleOutput.contains("0 (0)")) {
				CustomLogger.logInfo(
						"compareImages: baseline and actual images are similar");
				check = true;
			} else if (firstResult >= 0.00 && firstResult <= 5.00) {
				CustomLogger.logInfo(
						"compareImages: baseline and actual images are almost similar as lying under tolerance");
				check = true;
			} else {
				launcher.runApplication(new String[]{APP_DIR, "-compose", "src",
						srcFile, compFile, "difference.png"});

				File srcfile = new File("difference.png");
				File desFile = new File(diffFilePath);
				FileUtils.moveFile(srcfile, desFile);

				CustomLogger.logWarning(
						"compareImages: baseline and actual images are different, created a image showing differences ["
								+ desFile + "]");
			}
		} catch (Exception e) {
			CustomLogger.logError("compareImages: " + e.getMessage());
			throw new Exception("compareImages: " + e.getMessage());
		}
		return check;
	}

	private BufferedImage fileToImage(String filePath) {
		BufferedImage image = null;
		try {
			File f = new File(filePath);
			if (f.exists() && f.isFile()) {
				image = ImageIO.read(f);
			}
		} catch (Exception e) {
			CustomLogger.logError("fileToImage: " + e.getMessage());
		}
		return image;
	}

}
